timer=function (name) {
    this.name = name;
};
RedisSMQ = require("rsmq");
RSMQWorker = require("rsmq-worker");

timer.go=function(queue,array,interval,preprocess,fn){
    var worker = new RSMQWorker(queue);
    worker.on("message", function (resp, next, id) {
        resp = JSON.parse(resp);
        if(preprocess){
            resp=preprocess(resp)
        }

        array.push(resp);
        worker.del(id);
        resp=null;
        next()
    });
    worker.start();

    setInterval(function () {
        if (array.length != 0) {
            var clone = array.slice(0);
            array = [];
            _.each(clone, function (Q) {
                fn(Q);
            });

        }
    }, interval);
};

timer.goArray=function(queue,array,interval,preprocess,fn){
    var worker = new RSMQWorker(queue);
    worker.on("message", function (resp, next, id) {
        resp = JSON.parse(resp);
        if(preprocess){
            resp=preprocess(resp)
        }

        array.push(resp);
        worker.del(id);
        resp=null;
        next()
    });
    worker.start();

    setInterval(function () {
        
        if (array.length != 0) {
            var clone = array.slice(0);
            array = [];
            fn(clone);
        }
    }, interval);
};


timer.test=function(queue,cb){
    setTimeout(function(){
        rsmq.receiveMessage({qname:queue}, function (err, resp) {
            if (resp.id) {
                var parsed=JSON.parse(resp.message)

                rsmq.deleteMessage({qname:queue, id:resp.id}, function (err, resp) {
                    if (resp===1) {
                        cb(parsed);
                    }
                    else {
                        console.log("Message not found.")
                    }
                });
            }
            else {
                console.log(false);
                cb(false)
            }
        });
    },3000)
};
exports.timer=timer;